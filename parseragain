from alexer import*




class typee(Enum):
    BLOCKID = 1
    END = 2
    VARID = 4
    INTEGER = 5
    PROCESS = 6
    SEQUENCE = 7
    CHOICE = 8
    PARALLEL = 9
    COMPOSITION = 10
    REC = 11
    CONDITION = 12
    PATH = 13
    SEND = 14
    DEL = 15
    MOVE = 16
    ASSIGN = 17
    ADD = 18
    MUL = 19
    MINUS = 20
    DIV = 21
    MOD = 22
    INF = 23
    SUP = 24
    SUPEQ = 25
    INFEQ = 26
    EQ = 28
    BRACKETLEFT = 29
    BRACKETRIGHT = 30
    ACTION = 31
    GETVALUE = 32
    ROOT = 33
    ARITH = 34


class AbstractSyntaxNode():

    def __init__(self , type , list , firsttoken , lasttoken ,identifiant , parent , numberforgraph):
        self.type = type
        self.childnode = list
        self.firsttoken = firsttoken
        self.lasttoken = lasttoken
        self.identifiant = identifiant
        self.parentnode = parent
        self.numberforgraphviz = numberforgraph



    def GetType(self):
        return self.type

    def GetIdentifiant(self):
        return self.identifiant

    def GetNumberForGraphviz(self):
        return self.numberforgraphviz


    def GetChildren(self):
        return self.childnode

    def GetFirstToken(self):
        return self.firsttoken

    def GetLastToken(self):
        return self.lasttoken

    def AddNodeToChild(self , node):
        self.childnode += [node]

    def GetParentNode(self):
        return self.parentnode

    def GetListNodes(self):
        l = [self]
        for a in self.GetChildren() :
            l += a.GetListNodes()
        return l


    def GetListEdgesAndNodes(self):
        l = self.GetListNodes()
        k = []
        for a in l :
            for b in a.GetChildren():
                k += [(a,b)]
        return k



class AbstractSyntaxTree():

    def __init__(self , root):
        self.root = root

    def GetRoot(self):
        return self.root

    def AddNodeToNode(self , nodeA , nodeB ):
        nodeA.AddNodeToChild(nodeB)







class Parse():

    def __init__(self , tokenlist):
        self.tokenlist = tokenlist
        self.nodecounterforgraphviz = 1
        self.endcounter = 0
        self.currentnode = AbstractSyntaxNode(typee.ROOT , [] , None , None , None, None, 0)
        self.tree = AbstractSyntaxTree(self.currentnode)
        self.bracketcounter = 0
        self.bracketarithcounter = 0
        self.currentnodeforarith = None

    def AddNodeToTree(self, node):
        self.tree.AddNodeToNode(self.currentnode , node )

    def AddNodeToN(self, node1, node2):
        self.tree.AddNodeToNode(node1 , node2)

    def GetToRoot(self):
        return self.tree.GetRoot()

    def GetCurrentNode(self):
        return self.currentnode

    def GetToAncestor(self):
        return self.currentnode.GetParentNode()

    def ParseBlock(self):
        if len(self.tokenlist) == 1:
            print("Syntax error at line", self.tokenlist[0][3], "at postion" , self.tokenlist[0][2], "afterblock identifier expected")
        elif self.tokenlist[1][0] == token.IDENTIFIER :
            node = AbstractSyntaxNode(typee.BLOCKID , [] , None , None , self.tokenlist[1][1] , self.currentnode , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToTree(node)
            self.currentnode = node
            self.tokenlist = self.tokenlist[2:]
            self.endcounter += 1
            self.ParseTree()
        else :
            print("Syntax error at line", self.tokenlist[0][3], "at postion", self.tokenlist[0][2], "after block , identifier expected")

    def ParseVariable(self):
        if len(self.tokenlist) == 1 :
            print("Syntax error at line", self.tokenlist[0][3], "at postion", self.tokenlist[0][2],"after var , identifier expected")
        if self.currentnode.GetType() == typee.BLOCKID :
            if self.tokenlist[1][0] == token.IDENTIFIER :
                node = AbstractSyntaxNode(typee.VARID , [] , None , None , self.tokenlist[1][1] ,self.currentnode , self.nodecounterforgraphviz)
                self.nodecounterforgraphviz += 1
                self.AddNodeToTree(node)
                self.tokenlist  = self.tokenlist[2:]
                if not self.tokenlist == [] :
                    node2 = AbstractSyntaxNode(typee.ARITH, [], None , None, None, node , self.nodecounterforgraphviz)
                    self.nodecounterforgraphviz += 1
                    self.AddNodeToN(node , node2)
                    self.currentnodeforarith = node2
                    self.ParseArithTree()
                else :
                    print("Syntax error at line", self.tokenlist[0][3], "at postion", self.tokenlist[0][2],"after var , identifier expected")
            else :
                print("Syntax error at line", self.tokenlist[0][3], "at postion", self.tokenlist[0][2], "after var , identifier expected")
        else :
            print("Syntax error at line", self.tokenlist[0][3], "at postion", self.tokenlist[0][2], "before var , block expected")

    def ParseEnd(self):
        if self.endcounter == 0:
            print("Syntax error at line", self.tokenlist[0][3], "at postion", self.tokenlist[0][2],"Missing block before end")
        else :
            if self.endcounter == 1 :
                print("o")
                self.endcounter = 0
                self.currentnode = self.GetToRoot()
                self.tokenlist = self.tokenlist[1:]
            else:
                self.endcounter -= 1
                self.currentnode = self.GetToAncestor()
                self.tokenlist = self.tokenlist[1:]
                self.ParseTree()



    def ParseTree(self):
        if self.tokenlist[0][0] == token.BLOCK:
            self.ParseBlock()
        else :
            if self.tokenlist[0][0] == token.VAR :
                self.ParseVariable()
            else :
                if self.tokenlist[0][0] == token.END :
                    print("yeaaaaaaaaaaaaaaaaaaaaaah")
                    self.ParseEnd()
                else :
                    print("syntax error 9")






    def ParseAction(self):
        print(self.tokenlist)
        if len(self.tokenlist) == 1:
            print("Syntax error at line", self.tokenlist[0][3], "at postion", self.tokenlist[0][2],"Missing process after action")
        else:
            if self.tokenlist[1][0] == token.ASSIGN:
                if self.tokenlist[2][0] == token.PATH:
                    node1 = AbstractSyntaxNode(typee.ASSIGN, [], None, None, None, self.currentnode , self.nodecounterforgraphviz)
                    self.nodecounterforgraphviz += 1
                    self.AddNodeToTree(node1)
                    node2 = AbstractSyntaxNode(typee.PATH , [] , None , None , self.tokenlist[2][1] , node1 , self.nodecounterforgraphviz)
                    self.nodecounterforgraphviz += 1
                    self.AddNodeToN(node1 , node2)
                    node3 = AbstractSyntaxNode(typee.ARITH , [] , None , None , None , node2 , self.nodecounterforgraphviz)
                    self.nodecounterforgraphviz += 1
                    self.AddNodeToN(node2 , node3)
                    self.currentnodeforarith = node3
                    self.tokenlist = self.tokenlist[3:]
                    self.ParseArith()
                else :
                    print("Syntax error at line", self.tokenlist[0][3], "at postion", self.tokenlist[0][2],"Missing path after assign")
            elif self.tokenlist[1][0] == token.SEND :
                if self.tokenlist[2][0] == token.PATH :
                    if self.tokenlist[3][0] == token.PATH :
                        node1 = AbstractSyntaxNode(typee.SEND, [], None, None, None, self.currentnode , self.nodecounterforgraphviz)
                        self.nodecounterforgraphviz += 1
                        self.AddNodeToTree(node1)
                        node2 = AbstractSyntaxNode(typee.PATH, [], None, None, self.tokenlist[2][1] , node1 , self.nodecounterforgraphviz)
                        self.nodecounterforgraphviz += 1
                        self.AddNodeToN(node1, node2)
                        node3 = AbstractSyntaxNode(typee.PATH, [], None , None , self.tokenlist[3][1] , node2 , self.nodecounterforgraphviz)
                        self.nodecounterforgraphviz += 1
                        self.AddNodeToN(node2 , node3)
                        self.tokenlist = self.tokenlist[4:]
                        self.ParseProcess()
                    else :
                        print("Syntax error at line", self.tokenlist[0][3], "at postion", self.tokenlist[0][2],"Missing path after path")
                else :
                    print("Syntax error at line", self.tokenlist[0][3], "at postion", self.tokenlist[0][2], "Missing  path after send")
            elif self.tokenlist[1][0] == token.MOVE :
                if self.tokenlist[2][0] == token.PATH :
                    if self.tokenlist[3][0] == token.PATH :
                        node1 = AbstractSyntaxNode(typee.MOVE, [], None, None, None , self.currentnode , self.nodecounterforgraphviz)
                        self.nodecounterforgraphviz += 1
                        self.AddNodeToTree(node1)
                        node2 = AbstractSyntaxNode(typee.PATH, [], None, None, self.tokenlist[2][1], node1 , self.nodecounterforgraphviz)
                        self.nodecounterforgraphviz += 1
                        self.AddNodeToN(node1, node2)
                        node3 = AbstractSyntaxNode(typee.PATH, [], None , None , self.tokenlist[3][1] , node2 , self.nodecounterforgraphviz)
                        self.nodecounterforgraphviz += 1
                        self.AddNodeToN(node2 , node3)
                        self.tokenlist = self.tokenlist[4:]
                        self.ParseProcess()
                    else :
                        print("Syntax error at line", self.tokenlist[0][3], "at postion", self.tokenlist[0][2],"Missing path after path")
                else :
                    print("Syntax error at line", self.tokenlist[0][3], "at postion", self.tokenlist[0][2], "Missing  path after move")
            elif self.tokenlist[1][0] == token.DEL :
                if self.tokenlist[2][0] == token.PATH :
                    node1 = AbstractSyntaxNode(typee.DEL, [], None, None, None, self.currentnode , self.currentnodeforarith)
                    self.nodecounterforgraphviz += 1
                    self.AddNodeToTree(node1)
                    node2 = AbstractSyntaxNode(typee.PATH, [], None, None, self.tokenlist[2][1], node1, self.nodecounterforgraphviz)
                    self.nodecounterforgraphviz += 1
                    self.AddNodeToN(node1, node2)
                    self.tokenlist = self.tokenlist[3:]
                    print(self.tokenlist)
                    self.ParseProcess()
                else :
                    print("Syntax error at line", self.tokenlist[0][3], "at postion", self.tokenlist[0][2],"Missing path after path")
            else :
                print("Syntax error at line", self.tokenlist[0][3], "at postion", self.tokenlist[0][2],"Missing function after action")




    def ParseGetval(self):
        if len(self.tokenlist) == 1:
            print("Syntax error at line", self.tokenlist[0][3], "at postion", self.tokenlist[0][2],"Missing path after value")
        else:
            if self.tokenlist[1][0] == token.PATH :
                node = AbstractSyntaxNode(typee.GETVAL, [], None, None, None, self.currentnodeforarith , self.nodecounterforgraphviz)
                self.nodecounterforgraphviz += 1
                self.AddNodeToTree(node)
                node1 = AbstractSyntaxNode(typee.PATH , [] , None , None , None , node ,   self.nodecounterforgraphviz)
                self.nodecounterforgraphviz += 1
                self.AddNodeToN(node , node1)
                self.tokenlist = self.tokenlist[2:]
                return self.ParseArith()
            else :
                print("Syntax error at line", self.tokenlist[0][3], "at postion", self.tokenlist[0][2],"Missing path after value")


    def ParseGetvalTree(self):
        if len(self.tokenlist) == 1:
            print("Syntax error at line", self.tokenlist[0][3], "at postion", self.tokenlist[0][2],"Missing path after value")
        else:
            if self.tokenlist[1][0] == token.PATH :
                node = AbstractSyntaxNode(typee.GETVAL, [], None, None, None, self.currentnode , self.nodecounterforgraphviz)
                self.nodecounterforgraphviz += 1
                self.AddNodeToTree(node)
                node1 = AbstractSyntaxNode(typee.PATH , [] , None , None , None , node , self.nodecounterforgraphviz)
                self.nodecounterforgraphviz += 1
                self.AddNodeToN(node , node1)
                self.tokenlist = self.tokenlist[2:]
                return self.ParseArithTree()
            else :
                print("Syntax error at line", self.tokenlist[0][3], "at postion", self.tokenlist[0][2],"Missing path after value")






    def ParseBrakcetRightProcess(self):
        print(self.tokenlist)
        if len(self.tokenlist) == 1:
            print("Syntax error at line", self.tokenlist[0][3], "at postion" , self.tokenlist[0][2], "after ( process operator expected")
        elif self.tokenlist[1][0] == token.SEQUENCE :
            node = AbstractSyntaxNode(typee.SEQUENCE , [] , None , None , self.tokenlist[1][1] , self.currentnode , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToTree(node)
            self.currentnode = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketcounter += 1
            self.ParseProcess()
        elif self.tokenlist[1][0] == token.PARALLEL :
            node = AbstractSyntaxNode(typee.PARALLEL , [] , None , None , self.tokenlist[1][1] , self.currentnode , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToTree(node)
            self.currentnode = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketcounter += 1
            self.ParseProcess()
        elif self.tokenlist[1][0] == token.CHOICE :
            node = AbstractSyntaxNode(typee.CHOICE , [] , None , None , self.tokenlist[1][1] , self.currentnode , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToTree(node)
            self.currentnode = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketcounter += 1
            self.ParseProcess()
        elif self.tokenlist[1][0] == token.COMPOSITION :
            node = AbstractSyntaxNode(typee.COMPOSITION , [] , None , None , self.tokenlist[1][1] , self.currentnode , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToTree(node)
            self.currentnode = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketcounter += 1
            self.ParseProcess()
        elif self.tokenlist[1][0] == token.REC :
            node = AbstractSyntaxNode(typee.REC , [] , None , None , self.tokenlist[1][1] , self.currentnode , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToTree(node)
            self.currentnode = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketcounter += 1
            self.ParseProcess()
        elif self.tokenlist[1][0] == token.ACTION :
            node = AbstractSyntaxNode(typee.ACTION , [] , None , None , self.tokenlist[1][1] , self.currentnode, self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToTree(node)
            self.currentnode = node
            self.tokenlist = self.tokenlist[1:]
            self.bracketcounter += 1
            self.ParseAction()
        elif self.tokenlist[1][0] == token.CONDITION :
            node = AbstractSyntaxNode(typee.CONDITION , [] , None , None , self.tokenlist[1][1] , self.currentnode , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToTree(node)
            self.currentnode = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketcounter += 1
            node1 = AbstractSyntaxNode(typee.ARITH, [], None, None, None, node, self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN(node, node1)
            self.currentnodeforarith = node1
            self.ParseArith()
        else :
            print("Syntax error at line", self.tokenlist[0][3], "at postion", self.tokenlist[0][2], "after ( process operator expected")







    def ParseBrakcetRightArith(self):
        if len(self.tokenlist) == 1:
            print("Syntax error at line", self.tokenlist[0][3], "at postion" , self.tokenlist[0][2], "after ( process operator expected")
        elif self.tokenlist[1][0] == token.ADD :
            node = AbstractSyntaxNode(typee.ADD , [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN( self.currentnodeforarith , node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArith()
        elif self.tokenlist[1][0] == token.MINUS :
            node = AbstractSyntaxNode(typee.MINUS , [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN( self.currentnodeforarith , node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArith()
        elif self.tokenlist[1][0] == token.MUL:
            node = AbstractSyntaxNode(typee.MUL , [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN( self.currentnodeforarith , node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArith()
        elif self.tokenlist[1][0] == token.DIV:
            node = AbstractSyntaxNode(typee.DIV, [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN( self.currentnodeforarith , node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArith()
        elif self.tokenlist[1][0] == token.MOD :
            node = AbstractSyntaxNode(typee.MOD , [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN( self.currentnodeforarith , node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArith()
        elif self.tokenlist[1][0] == token.EQ :
            node = AbstractSyntaxNode(typee.EQ , [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN( self.currentnodeforarith , node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArith()
        elif self.tokenlist[1][0] == token.SUPEQ :
            node = AbstractSyntaxNode(typee.SUPEQ , [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN( self.currentnodeforarith , node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArith()
        elif self.tokenlist[1][0] == token.INFEQ:
            node = AbstractSyntaxNode(typee.INFEQ, [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN( self.currentnodeforarith , node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArith()
        elif self.tokenlist[1][0] == token.INF:
            node = AbstractSyntaxNode(typee.INF , [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN( self.currentnodeforarith , node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArith()
        elif self.tokenlist[1][0] == token.SUP :
            node = AbstractSyntaxNode(typee.SUP, [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN( self.currentnodeforarith , node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArith()
        elif self.tokenlist[1][0] == token.INTEGER :
            node = AbstractSyntaxNode(typee.INTEGER, [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN(self.currentnodeforarith, node)
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArith()
        elif self.tokenlist[1][0] == token.GETVALUE :
            node = AbstractSyntaxNode(typee.GETVALUE, [], None, None, None , self.currentnodeforarith, self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN( self.currentnodeforarith , node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            if (not self.tokenlist == []) and self.tokenlist[0][0] == token.PATH :
                node1 = AbstractSyntaxNode(typee.PATH, [], None, None, self.tokenlist[0][1] ,node , self.nodecounterforgraphviz)
                self.nodecounterforgraphviz += 1
                self.AddNodeToN(node , node1)
                self.tokenlist = self.tokenlist[1:]
                self.ParseArith()
        else :
            print("Syntax error at line", self.tokenlist[0][3], "at position", self.tokenlist[0][2], "after ( process operator expected")


    def ParseBrakcetRightArithTree(self):
        if len(self.tokenlist) == 1:
            print("Syntax error at line", self.tokenlist[0][3], "at postion" , self.tokenlist[0][2], "after ( process operator expected")
        elif self.tokenlist[1][0] == token.ADD :
            node = AbstractSyntaxNode(typee.ADD , [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN(self.currentnodeforarith, node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArithTree()
        elif self.tokenlist[1][0] == token.MINUS :
            node = AbstractSyntaxNode(typee.MINUS , [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN(self.currentnodeforarith, node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArithTree()
        elif self.tokenlist[1][0] == token.MUL:
            node = AbstractSyntaxNode(typee.MUL , [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN(self.currentnodeforarith, node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArithTree()
        elif self.tokenlist[1][0] == token.DIV:
            node = AbstractSyntaxNode(typee.DIV, [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN(self.currentnodeforarith, node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArithTree()
        elif self.tokenlist[1][0] == token.MOD :
            node = AbstractSyntaxNode(typee.MOD , [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN(self.currentnodeforarith , node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArithTree()
        elif self.tokenlist[1][0] == token.EQ :
            node = AbstractSyntaxNode(typee.EQ , [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN(self.currentnodeforarith , node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArithTree()
        elif self.tokenlist[1][0] == token.SUPEQ :
            node = AbstractSyntaxNode(typee.SUPEQ , [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN(self.currentnodeforarith,node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArithTree()
        elif self.tokenlist[1][0] == token.INFEQ:
            node = AbstractSyntaxNode(typee.INFEQ, [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN(self.currentnodeforarith , node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArithTree()
        elif self.tokenlist[1][0] == token.INF:
            node = AbstractSyntaxNode(typee.INF , [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN(self.currentnodeforarith , node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArithTree()
        elif self.tokenlist[1][0] == token.SUP :
            node = AbstractSyntaxNode(typee.SUP, [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN(self.currentnodeforarith,node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArithTree()
        elif self.tokenlist[1][0] == token.INTEGER :
            node = AbstractSyntaxNode(typee.INTEGER, [] , None , None , self.tokenlist[1][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN( self.currentnodeforarith , node)
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            self.ParseArithTree()
        elif self.tokenlist[1][0] == token.GETVALUE :
            node = AbstractSyntaxNode(typee.GETVALUE, [], None, None, None , self.currentnodeforarith, self.nodecounterforgraphviz)
            self.nodecounterforgraphviz += 1
            self.AddNodeToN( self.currentnodeforarith , node)
            self.currentnodeforarith = node
            self.tokenlist = self.tokenlist[2:]
            self.bracketarithcounter += 1
            if (not self.tokenlist == []) and self.tokenlist[0][0] == token.PATH :
                node1 = AbstractSyntaxNode(typee.PATH, [], None, None, self.tokenlist[0][1] ,node , self.nodecounterforgraphviz)
                self.nodecounterforgraphviz += 1
                self.AddNodeToN(node , node1)
                self.tokenlist = self.tokenlist[1:]
                self.ParseArithTree()
        else :
            print("Syntax error at line", self.tokenlist[0][3], "at position", self.tokenlist[0][2], "after ( process operator expected")


    def ParseBLeftArith(self):
        if self.bracketarithcounter == 0:
            print("Syntax error at line", self.tokenlist[0][3], "at position", self.tokenlist[0][2], "Missing ( before )")
        elif self.bracketarithcounter == 1:
            self.bracketarithcounter = 0
            self.currentnodeforarith = None
            self.tokenlist = self.tokenlist[1:]
            print("hellomyboyinthehood" , self.tokenlist )
            self.ParseProcess()
        else:
            self.bracketarithcounter -= 1
            self.currentnodeforarith = self.currentnodeforarith.GetParentNode()
            self.tokenlist = self.tokenlist[1:]
            self.ParseArith()


    def ParseBLeftArithTree(self):
        if self.bracketarithcounter == 0:
            print("Syntax error at line", self.tokenlist[0][3], "at position", self.tokenlist[0][2], "Missing ( before )")
        elif self.bracketarithcounter == 1:
            self.bracketarithcounter = 0
            self.currentnodeforarith = None
            self.tokenlist = self.tokenlist[1:]
            print("hellomyboy" , self.tokenlist )
            self.ParseTree()
        else:
            self.bracketarithcounter -= 1
            self.currentnodeforarith = self.currentnodeforarith.GetParentNode()
            self.tokenlist = self.tokenlist[1:]
            self.ParseArithTree()

    def ParseBLeftProcess(self):
        print(self.tokenlist)
        if self.bracketcounter == 0:
            print("Syntax error at line", self.tokenlist[0][3], "at position", self.tokenlist[0][2], "Missing ( before )")
        elif self.bracketcounter == 1:
            self.bracketcounter = 0
            self.currentnode = self.GetToRoot()
            self.tokenlist = self.tokenlist[1:]
            print(self.tokenlist)
        else:
            self.bracketcounter -= 1
            self.currentnode = self.currentnode.GetParentNode()
            self.tokenlist = self.tokenlist[1:]
            self.ParseProcess()

    def ParseArith(self):
        if self.tokenlist[0][0] == token.BRACKETRIGHT:
            self.ParseBrakcetRightArith()
        elif self.tokenlist[0][0] == token.BRACKETLEFT:
            self.ParseBLeftArith()
        elif self.tokenlist[0][0] == token.INTEGER :
            if self.bracketarithcounter == 0 :
                node = AbstractSyntaxNode(typee.INTEGER ,[] , None , None , self.tokenlist[0][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
                self.AddNodeToN( self.currentnodeforarith , node)
                self.tokenlist = self.tokenlist[1:]
                self.ParseProcess()
            else :
                node = AbstractSyntaxNode(typee.INTEGER, [], None, None, self.tokenlist[0][1], self.currentnodeforarith , self.nodecounterforgraphviz)
                self.AddNodeToN(self.currentnodeforarith, node)
                self.tokenlist = self.tokenlist[1:]
                self.ParseArith()
        else :
            print("syntax error")

    def ParseArithTree(self):
        if self.tokenlist[0][0] == token.BRACKETRIGHT:
            self.ParseBrakcetRightArithTree()
        elif self.tokenlist[0][0] == token.BRACKETLEFT:
            self.ParseBLeftArithTree()
        elif self.tokenlist[0][0] == token.INTEGER :
            if self.bracketarithcounter == 0 :
                node = AbstractSyntaxNode(typee.INTEGER ,[] , None , None , self.tokenlist[0][1] , self.currentnodeforarith , self.nodecounterforgraphviz)
                self.AddNodeToN( self.currentnodeforarith , node)
                self.tokenlist = self.tokenlist[1:]
                self.ParseTree()
            else :
                node = AbstractSyntaxNode(typee.INTEGER, [], None, None, self.tokenlist[0][1], self.currentnodeforarith , self.nodecounterforgraphviz)
                self.AddNodeToN(self.currentnodeforarith, node)
                self.tokenlist = self.tokenlist[1:]
                self.ParseArithTree()
        else :
            print("syntax error 10")

    def ParseProcess(self):
        if self.tokenlist[0][0] == token.BRACKETRIGHT:
            self.ParseBrakcetRightProcess()
        elif self.tokenlist[0][0] == token.BRACKETLEFT:
            self.ParseBLeftProcess()
        else :
            print("syntax error10")

    def GetTree(self):
        return self.tree

    def PrintTree(self):
        l = self.GetToRoot()

    def ParseTotal(self):
        self.ParseTree()
        print("azertyugg" , self.tokenlist)
        if (not self.tokenlist == []) and self.tokenlist[0][0] == token.PROCESS :
            self.tokenlist = self.tokenlist[1:]
            print("eyy")
            if (not self.tokenlist == []) and self.tokenlist[0][0] == token.IDENTIFIER:
                self.tokenlist = self.tokenlist[1:]
                self.ParseProcess()
                print("r")
                if (not self.tokenlist == []) and self.tokenlist[0][0] == token.END :
                    self.tokenlist = self.tokenlist[1:]
                    while not self.tokenlist == []:
                        if (not self.tokenlist == []) and self.tokenlist[0][0] == token.PROCESS:
                            self.tokenlist = self.tokenlist[1:]
                            if (not self.tokenlist == []) and self.tokenlist[0][0] == token.IDENTIFIER:
                                self.tokenlist = self.tokenlist[1:]
                                self.ParseProcess()
                                if (not self.tokenlist == []) and self.tokenlist[0][0] == token.END:
                                    self.tokenlist = self.tokenlist[1:]
                    return self.tree
                return self.tree

    def Print(self , x):
        file = open(x + ".gv" , "x")
        root = self.GetToRoot()
        k = root.GetListNodes()
        l = root.GetListEdgesAndNodes()
        file.write("digraph {  \n")
        for a in k :
            if a.GetType() == typee.INTEGER or a.GetType() == typee.BLOCKID or a.GetType()== typee.VARID  or a.GetType() == typee.PATH:
                f = a.GetIdentifiant()
                print(f , "XXXXXX")
                file.write( "\"" + str(a.GetNumberForGraphviz()) + "." +  str(a.GetType()) + ","+ f + "\"" + "; \n" )
            else :
                file.write("\"" + str(a.GetNumberForGraphviz()) + "." +  str(a.GetType()) + "\"" + "; \n" )
        for b in l:
            i = b[0]
            j = b[1]
            if i.GetType() == typee.INTEGER or i.GetType() == typee.BLOCKID or i.GetType()== typee.VARID or i.GetType() == typee.PATH :
                if j.GetType() == typee.INTEGER or j.GetType() == typee.BLOCKID or j.GetType() == typee.VARID or j.GetType() == typee.PATH :
                    file.write("\""  + str(i.GetNumberForGraphviz()) + "." +  str(i.GetType()) + ","+ i.GetIdentifiant() + "\"" + "->" + "\"" +  str(j.GetNumberForGraphviz()) + "." +  str(j.GetType()) + ","+ j.GetIdentifiant() + "\"" + "; \n")
                else :
                    file.write("\"" + str(i.GetNumberForGraphviz()) + "." +  str(i.GetType()) + ","+ i.GetIdentifiant() + "\"" + "->" + "\"" + str(j.GetNumberForGraphviz()) + "." +  str(j.GetType()) + "\"" + "; \n")
            else :
                if j.GetType() == typee.INTEGER or j.GetType() == typee.BLOCKID or j.GetType() == typee.VARID or j.GetType() == typee.PATH :
                    file.write("\"" + str(i.GetNumberForGraphviz()) + "." +  str(i.GetType()) + "\""  + "->" + "\"" + str(j.GetNumberForGraphviz()) + "." +  str(j.GetType()) + ","+ j.GetIdentifiant() + "\"" + "; \n")
                else :
                    file.write("\"" + str(i.GetNumberForGraphviz()) + "." +  str(i.GetType()) + "\"" +  "->" + "\"" + str(j.GetNumberForGraphviz()) + "." +  str(j.GetType()) + "\"" + "; \n")
        file.write("}")
        file.close()












file = open("ex5", "r")
tolo = lexer(file, "r")
l = tolo.TokenList()
print(l)
print(tolo.GetTokenList())
k = Parse(l)

print(k.ParseTotal())

for a in k.GetToRoot().GetListNodes():
    print(a.GetType())

print(k.Print("40"))
