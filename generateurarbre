from arbreetnoueuds import Tree, Node
import random
from assoctable import Assoctable


class Generateur_arbre():
    def __init__(self , identifiant):
        self.__randomint = random.randint(1 , 100)
        self.identifiant = identifiant


    def randint(self):
        return self.__randomint

    def randlistnodes(self):
        l = []
        x = self.__randomint
        for i in range(x):
            l += [Node( i , Node.BLOCK)]
        return  l


    def randtree(self):
        l = self.randlistnodes()
        i = len(l)
        entier = random.randint(0 , i -1 )
        rootnode = l[entier]
        t = Tree([])
        t.addroot(rootnode)
        l.remove( l[entier])
        def randchoiceofparents(h):
            p = len(h)
            o = random.randint(0, p-1)
            n = h[o]
            return n
        def randchoiceofnodes( k ):
            x1 = len(k)
            x2 = random.randint(0, x1 - 1)
            x3 = k[x2]
            k.remove(x3)
            return x3
        def randtree( y , tree):
            if y == []:
                return tree
            else:
                n = randchoiceofnodes( y )
                i = randchoiceofparents( tree.listnodess() )
                tree.addnod(n , i )
                return randtree(y , tree)
        return randtree(l , t)

def randchoiceofparents(h):
            p = len(h)
            o = random.randint(0, p-1)
            n = h[o]
            return n

print(randchoiceofparents([8 , 9 ,10 , 11 , 12 , 13 , 14 ]))


class Generateur2arbresandassoctable():
    def __init__(self , id1 , id2 ):
        self.__tree1 = Generateur_arbre(id1).randtree()
        self.__tree2 = Generateur_arbre(id2).randtree()

    def coupletree(self):
        return (self.__tree1 , self.__tree2)

    def couplelistenode(self):
        return (self.coupletree()[0].listnodess() , self.coupletree()[1].listnodess())

    def randomassignement(self):
        l1 , l2 = self.couplelistenode()
        def randomtransfo(l) :
            if l == [] :
                return l
            else:
                i = random.randint(0,1)
                return [(l[0] , i)] + randomtransfo(l[1:])
        return randomtransfo(l1) , randomtransfo(l2)


    def randoclasse(self):
        def randoarrangement(l1 , l2):
            if l1 == [] or l2 == []:
                return None
            else:
                c= []
                d =[]
                i = len(l1)
                o = len(l2)
                x = random.randint(0 , i - 1)
                for i in range(x):
                    d = [l1[random.randint(0,i)]] + d
                    l1.remove(d[0])
                j =  random.randint(0 , o - 1)
                for r in range(j):
                    c = [l2[random.randint(0,r)]] + c
                    l2.remove(c[0])
                return d + c
        return randoarrangement(self.randomassignement())

    def randoassoctable(self):
        table = Assoctable()
        e , f = self.randomassignement()
        def randoarrangement(l1, l2):
            if l1 == [] or l2 == []:
                return None
            else:
                c = []
                d = []
                i = len(l1)
                o = len(l2)
                x = random.randint(0, i - 1)
                for i in range(x):
                    mi = random.randint(0, len(l1)-1)
                    d = [l1[mi]] + d
                    l1.remove(d[0])
                j = random.randint(0, o - 1)
                for r in range(j):
                    mo = random.randint(0, len(l2)-1)
                    c = [l2[mo]] + c
                    l2.remove(c[0])
                return d + c
        while randoarrangement(e , f) != None:
            table.addclasse(randoarrangement(e,f))
        if e == []:
            m = table.classes()[0] + f
            table.delete(table.classes()[0])
            table.addclasse(m )
        else :
            b = table.classes()[0] + f
            table.delete(table.classes()[0])
            table.addclasse(b)
        return table


c = Generateur2arbresandassoctable(1 , 2 )
#print(c.randoassoctable().classes())




#u = Generateur_arbre(5)
#u.randtree().displaytree()


def randoarrangement(l1, l2):
    if l1 == [] or l2 == []:
        return None
    else:
        c = []
        d = []
        i = len(l1)
        o = len(l2)
        x = random.randint(0, i - 1)
        for i in range(x):
            mi = random.randint(0, len(l1)-1)
            d = [l1[mi]] + d
            l1.remove(d[0])
        j = random.randint(0, o - 1)
        for r in range(j):
            mo = random.randint(0, len(l2)-1)
            c = [l2[mo]] + c
            l2.remove(c[0])
        return (d + c ) ,( l1 , l2 )

print(randoarrangement([1,2,3,4,5] , [6,7,8,9,11 ,12 ,13 ,14 ,15 ]))

"""def epuiserandoraangement(l1 , l2 ):
    i = 0
    while not randoarrangement(l1 ,l2) == None:
        i += 1
        randoarrangement(l1 ,l2)
    return i 

print(epuiserandoraangement([1,2,3,4,5] , [6,7,8,9,11 ,12 ,13 ,14 ,15 ])) """
